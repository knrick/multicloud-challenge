version: 0.2
phases:
  install:
    runtime-versions:
      docker: 20
    commands:
      # Install system dependencies
      - yum update -y
      - yum install -y python3 python3-pip zip
      # Install kubectl
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
      - chmod +x ./kubectl
      - mv ./kubectl /usr/local/bin
      - kubectl version --short --client
      # Install Python dependencies
      - python3 -m pip install --upgrade pip
      - python3 -m pip install boto3 botocore google-cloud-bigquery
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - REPOSITORY_URI=$ECR_REPO
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
  build:
    commands:
      # Build FastAPI Docker image
      - echo Building the Docker image...
      - cd src/app
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION
      - cd ../../
      
      # Package Product Recommendations Lambda function
      - echo Packaging Product Recommendations Lambda function...
      - mkdir -p lambda/product-recommendations/build
      - cp lambda/product-recommendations/index.py lambda/product-recommendations/build/
      - cd lambda/product-recommendations/build
      - python3 -m pip install --target . boto3 botocore
      - zip -r ../function.zip .
      - cd ../../..
      
      # Package BigQuery Sync Lambda function
      - echo Packaging BigQuery Sync Lambda function...
      - mkdir -p lambda/bigquery-sync/build
      - cp lambda/bigquery-sync/index.py lambda/bigquery-sync/build/
      - cd lambda/bigquery-sync/build
      # Debug: Print what would be written to the credentials file
      - echo "Content to be written to google_credentials.json:"
      - echo "$GOOGLE_CREDENTIALS"
      - echo "Writing credentials file..."
      # Create Google credentials from environment variables
      - echo "$GOOGLE_CREDENTIALS" > google_credentials.json
      - echo "Content of written file:"
      - cat google_credentials.json
      - python3 -m pip install --target . boto3 botocore google-cloud-bigquery google-auth
      - zip -r ../function.zip .
      - cd ../../..
  post_build:
    commands:
      # Push Docker image
      - echo Pushing the Docker image...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION
      - export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION
      
      # Update Lambda functions
      - echo Updating Lambda functions...
      - aws lambda update-function-code --function-name cloudmart-list-products --zip-file fileb://lambda/product-recommendations/function.zip
      - aws lambda update-function-code --function-name cloudmart-bigquery-sync --zip-file fileb://lambda/bigquery-sync/function.zip
      
      # Deploy to EKS
      - aws eks update-kubeconfig --region us-east-1 --name cloudmart
      - kubectl get nodes
      - IMAGE_URI=$REPOSITORY_URI:$imageTag
      - echo $IMAGE_URI
      - sed -i "s|CONTAINER_IMAGE|$IMAGE_URI|g" kubernetes/cloudmart.yaml
      - kubectl apply -f kubernetes/cloudmart.yaml
      - echo "Restarting deployment to pull new image..."
      - kubectl rollout restart deployment cloudmart
      - kubectl rollout status deployment cloudmart --timeout=300s
    env:
      exported-variables: ["imageTag"]
artifacts:
  files:
    - imagedefinitions.json
    - kubernetes/cloudmart.yaml
    - lambda/product-recommendations/function.zip
    - lambda/bigquery-sync/function.zip 